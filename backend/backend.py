# -*- coding: utf-8 -*-
"""backend.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R4wiiWhyxu3JBDgpiBG5c_zcNxaNiDNA
"""

# backend.py ‚Äî Flask API con claves protegidas por archivo .env

from flask import Flask, request, jsonify
from flask_cors import CORS
from pyngrok import ngrok, conf
import google.generativeai as genai
import os
from dotenv import load_dotenv

# Cargar variables del archivo .env
load_dotenv()

# Leer claves desde entorno
GENAI_API_KEY = os.getenv("GENAI_API_KEY")
NGROK_AUTH_TOKEN = os.getenv("NGROK_AUTH_TOKEN")

# Configurar Gemini y ngrok
genai.configure(api_key=GENAI_API_KEY)
conf.get_default().auth_token = NGROK_AUTH_TOKEN
model = genai.GenerativeModel(model_name="models/gemini-2.0-flash")

app = Flask(__name__)
CORS(app)

@app.route("/introduccion", methods=["POST"])
def generar_introduccion():
    data = request.json
    nombre = data.get("nombre")
    interacciones = data.get("interacciones")

    prompt = f"""
    Escribe un mensaje de bienvenida para un ni√±o llamado {nombre}, diciendo que su historia tendr√° {interacciones} interacciones.
    Usa un tono m√°gico, positivo y emocionante.
    """

    try:
        response = model.generate_content(prompt)
        return jsonify({"mensaje": response.text.strip()})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/inicio", methods=["POST"])
def generar_historia_y_opciones():
    data = request.json
    nombre = data.get("nombre")
    inicio = data.get("inicio")

    prompt_historia = f"""
    Un ni√±o llamado {nombre} escribi√≥ para comenzar su historia: "{inicio}"
    Contin√∫a esa historia de forma coherente, infantil y m√°gica. Escribe una sola parte de exactamente 100 palabras.
    """

    prompt_opciones = f"""
    Basado en esta historia: "{inicio}", genera 3 opciones creativas para continuar.
    Cada una debe tener m√°ximo 20 palabras y empezar con frases como:
    - "Si quieres que..."
    - "Deseas que..."
    - "Prefieres que..."
    """

    try:
        historia = model.generate_content(prompt_historia).text.strip()
        opciones_raw = model.generate_content(prompt_opciones).text.strip().splitlines()
        opciones = [op.strip("123.- ") for op in opciones_raw if op.strip()][:3]
        return jsonify({"historia": historia, "opciones": opciones})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# Exponer localmente por ngrok
public_url = ngrok.connect(5000)
print(f"üîó Tu endpoint es: {public_url}/introduccion")

app.run(port=5000)